//////////////////////////////////////////////////////////////////////////
//
//			*** lifeEngine (Двигатель жизни) ***
//				Copyright (C) 2018-2019
//
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// Авторы:				Егор Погуляка (zombiHello)
//
//////////////////////////////////////////////////////////////////////////

#include "engine/iconsolesystem.h"

#include "global.h"
#include "materialvar.h"

// ------------------------------------------------------------------------------------ //
// Очистить переменную
// ------------------------------------------------------------------------------------ //
void le::MaterialVar::Clear()
{
	value_int = 0;
	value_float = 0.f;
	value_bool = false;
	value_string = "";
	value_matrix4x4 = Matrix4x4_t( 0.f );
	value_vector2D = Vector2D_t( 0.f );
	value_vector3D = Vector3D_t( 0.f );
	value_vector4D = Vector4D_t( 0.f );

	isDefined = false;
}

// ------------------------------------------------------------------------------------ //
// Задать название переменной
// ------------------------------------------------------------------------------------ //
void le::MaterialVar::SetName( const char* Name )
{
	name = Name;
}

// ------------------------------------------------------------------------------------ //
// Задать значение переменной
// ------------------------------------------------------------------------------------ //
void le::MaterialVar::SetValueInt( int Value )
{
	type = MVT_INT;
	value_int = Value;

	isDefined = true;
}

// ------------------------------------------------------------------------------------ //
// Задать значение переменной
// ------------------------------------------------------------------------------------ //
void le::MaterialVar::SetValueFloat( float Value )
{
	type = MVT_FLOAT;
	value_float = Value;

	isDefined = true;
}

// ------------------------------------------------------------------------------------ //
// Задать значение переменной
// ------------------------------------------------------------------------------------ //
void le::MaterialVar::SetValueBool( bool Value )
{
	type = MVT_BOOL;
	value_bool = Value;

	isDefined = true;
}

// ------------------------------------------------------------------------------------ //
// Задать значение переменной
// ------------------------------------------------------------------------------------ //
void le::MaterialVar::SetValueVector2D( const Vector2D_t& Value )
{
	type = MVT_VECTOR_2D;
	value_vector2D = Value;

	isDefined = true;
}

// ------------------------------------------------------------------------------------ //
// Задать значение переменной
// ------------------------------------------------------------------------------------ //
void le::MaterialVar::SetValueVector3D( const Vector3D_t& Value )
{
	type = MVT_VECTOR_3D;
	value_vector3D = Value;

	isDefined = true;
}

// ------------------------------------------------------------------------------------ //
// Задать значение переменной
// ------------------------------------------------------------------------------------ //
void le::MaterialVar::SetValueVector4D( const Vector4D_t& Value )
{
	type = MVT_VECTOR_4D;
	value_vector4D = Value;

	isDefined = true;
}

// ------------------------------------------------------------------------------------ //
// Задать значение переменной
// ------------------------------------------------------------------------------------ //
void le::MaterialVar::SetValueMatrix( const Matrix4x4_t& Value )
{
	type = MVT_MATRIX;
	value_matrix4x4 = Value;

	isDefined = true;
}

// ------------------------------------------------------------------------------------ //
// Задать значение переменной
// ------------------------------------------------------------------------------------ //
void le::MaterialVar::SetValueString( const char* Value )
{
	type = MVT_STRING;
	value_string = Value;

	isDefined = true;
}

// ------------------------------------------------------------------------------------ //
// Определена ли переменная
// ------------------------------------------------------------------------------------ //
bool le::MaterialVar::IsDefined() const
{
	return isDefined;
}

// ------------------------------------------------------------------------------------ //
// Получить название переменной
// ------------------------------------------------------------------------------------ //
const char* le::MaterialVar::GetName() const
{
	return name.c_str();
}

// ------------------------------------------------------------------------------------ //
// Получить тип переменной
// ------------------------------------------------------------------------------------ //
le::MATERIAL_VAR_TYPE le::MaterialVar::GetType() const
{
	return type;
}

// ------------------------------------------------------------------------------------ //
// Получить значение переменной
// ------------------------------------------------------------------------------------ //
int le::MaterialVar::GetValueInt() const
{
	return value_int;
}

// ------------------------------------------------------------------------------------ //
// Получить значение переменной
// ------------------------------------------------------------------------------------ //
float le::MaterialVar::GetValueFloat() const
{
	return value_float;
}

// ------------------------------------------------------------------------------------ //
// Получить значение переменной
// ------------------------------------------------------------------------------------ //
bool le::MaterialVar::GetValueBool() const
{
	return value_bool;
}

// ------------------------------------------------------------------------------------ //
// Получить значение переменной
// ------------------------------------------------------------------------------------ //
const le::Vector2D_t& le::MaterialVar::GetValueVector2D() const
{
	return value_vector2D;
}

// ------------------------------------------------------------------------------------ //
// Получить значение переменной
// ------------------------------------------------------------------------------------ //
const le::Vector3D_t& le::MaterialVar::GetValueVector3D() const
{
	return value_vector3D;
}

// ------------------------------------------------------------------------------------ //
// Получить значение переменной
// ------------------------------------------------------------------------------------ //
const le::Vector4D_t& le::MaterialVar::GetValueVector4D() const
{
	return value_vector4D;
}

// ------------------------------------------------------------------------------------ //
// Получить значение переменной
// ------------------------------------------------------------------------------------ //
const le::Matrix4x4_t& le::MaterialVar::GetValueMatrix() const
{
	return value_matrix4x4;
}

// ------------------------------------------------------------------------------------ //
// Получить значение переменной
// ------------------------------------------------------------------------------------ //
const char* le::MaterialVar::GetValueString() const
{
	return value_string.c_str();
}

// ------------------------------------------------------------------------------------ //
// Конструктор
// ------------------------------------------------------------------------------------ //
le::MaterialVar::MaterialVar() :
	isDefined ( false ),
	value_int( 0 ),
	value_float( 0.f ),
	value_bool( false ),
	value_matrix4x4( 0.f ),
	value_vector2D( 0.f ),
	value_vector3D( 0.f ),
	value_vector4D( 0.f ),
	value_string( "" )
{}

// ------------------------------------------------------------------------------------ //
// Деструктор
// ------------------------------------------------------------------------------------ //
le::MaterialVar::~MaterialVar()
{}
