//////////////////////////////////////////////////////////////////////////
//
//			*** lifeEngine (Двигатель жизни) ***
//				Copyright (C) 2018-2020
//
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// Авторы:				Егор Погуляка (zombiHello)
//
//////////////////////////////////////////////////////////////////////////

#include "pointlight.h"

// ------------------------------------------------------------------------------------ //
// Задать прзицию света
// ------------------------------------------------------------------------------------ //
void le::PointLight::SetPosition( const Vector3D_t& Position )
{
	position = Position;
	isNeadUpdateTransformation = true;
}

// ------------------------------------------------------------------------------------ //
// Задать радиус света
// ------------------------------------------------------------------------------------ //
void le::PointLight::SetRadius( float Radius )
{
	radius = Radius;
}

// ------------------------------------------------------------------------------------ //
// Получить прзицию света
// ------------------------------------------------------------------------------------ //
const le::Vector3D_t& le::PointLight::GetPosition() const
{
	return position;
}

// ------------------------------------------------------------------------------------ //
// Получить радиус света
// ------------------------------------------------------------------------------------ //
float le::PointLight::GetRadius() const
{
	return radius;
}

// ------------------------------------------------------------------------------------ //
// Задать цвет света
// ------------------------------------------------------------------------------------ //
void le::PointLight::SetColor( const Vector4D_t& Color )
{
	color = Color;
}

// ------------------------------------------------------------------------------------ //
// Задать отражаемый цвет
// ------------------------------------------------------------------------------------ //
void le::PointLight::SetSpecular( const Vector4D_t & Color )
{
	specular = Color;
}

// ------------------------------------------------------------------------------------ //
// Задать интенсивность света
// ------------------------------------------------------------------------------------ //
void le::PointLight::SetIntensivity( float Intensivity )
{
	intensivity = Intensivity;
}

// ------------------------------------------------------------------------------------ //
// Получить цвет света
// ------------------------------------------------------------------------------------ //
const le::Vector4D_t& le::PointLight::GetColor() const
{
	return color;
}

// ------------------------------------------------------------------------------------ //
// Получить отражаемый цвет
// ------------------------------------------------------------------------------------ //
const le::Vector4D_t& le::PointLight::GetSpecular() const
{
	return specular;
}

// ------------------------------------------------------------------------------------ //
// Получить интенсивность
// ------------------------------------------------------------------------------------ //
float le::PointLight::GetIntensivity() const
{
	return intensivity;
}

// ------------------------------------------------------------------------------------ //
// Конструктор
// ------------------------------------------------------------------------------------ //
le::PointLight::PointLight() :
	isNeadUpdateTransformation( true ),
	intensivity( 1.f ),
	color( 1.f ),
	specular( 1.f ),
	radius( 0.f ),
    position( 0.f ),
    countReferences( 0 )
{}

// ------------------------------------------------------------------------------------ //
// Деструктор
// ------------------------------------------------------------------------------------ //
le::PointLight::~PointLight()
{}

// ------------------------------------------------------------------------------------ //
// Increment reference
// ------------------------------------------------------------------------------------ //
void le::PointLight::IncrementReference()
{
    ++countReferences;
}

// ------------------------------------------------------------------------------------ //
// Decrement reference
// ------------------------------------------------------------------------------------ //
void le::PointLight::DecrementReference()
{
    --countReferences;
}

// ------------------------------------------------------------------------------------ //
// Delete
// ------------------------------------------------------------------------------------ //
void le::PointLight::Release()
{
    delete this;
}

// ------------------------------------------------------------------------------------ //
// Get count references
// ------------------------------------------------------------------------------------ //
le::UInt32_t le::PointLight::GetCountReferences() const
{
    return countReferences;
}
