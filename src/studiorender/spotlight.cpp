//////////////////////////////////////////////////////////////////////////
//
//			*** lifeEngine (Двигатель жизни) ***
//				Copyright (C) 2018-2020
//
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// Авторы:				Егор Погуляка (zombiHello)
//
//////////////////////////////////////////////////////////////////////////

#include "spotlight.h"

// ------------------------------------------------------------------------------------ //
// Задать позицию света
// ------------------------------------------------------------------------------------ //
void le::SpotLight::SetPosition( const Vector3D_t& Position )
{
	position = Position;
	isNeadUpdateTransformation = true;
}

// ------------------------------------------------------------------------------------ //
// Задать поворот конуса
// ------------------------------------------------------------------------------------ //
void le::SpotLight::SetRotation( const Quaternion_t & Quaternion )
{
	rotation = Quaternion;
	isNeadUpdateTransformation = true;
	isNeadUpdataDirection = true;
}

// ------------------------------------------------------------------------------------ //
// Задать радиус конуса
// ------------------------------------------------------------------------------------ //
void le::SpotLight::SetRadius( float Radius )
{
	radius = Radius;
	isNeadUpdateCutoff = true;
}

// ------------------------------------------------------------------------------------ //
// Задать высоту конуса
// ------------------------------------------------------------------------------------ //
void le::SpotLight::SetHeight( float Height )
{
	height = Height;
	isNeadUpdateCutoff = true;
}

// ------------------------------------------------------------------------------------ //
// Получить прзицию света
// ------------------------------------------------------------------------------------ //
const le::Vector3D_t& le::SpotLight::GetPosition() const
{
	return position;
}

// ------------------------------------------------------------------------------------ //
// Получить поворот конуса
// ------------------------------------------------------------------------------------ //
const le::Quaternion_t& le::SpotLight::GetRotation() const
{
	return rotation;
}

// ------------------------------------------------------------------------------------ //
// Получить радиус конуса
// ------------------------------------------------------------------------------------ //
float le::SpotLight::GetRadius() const
{
	return radius;
}

// ------------------------------------------------------------------------------------ //
// Получить высоту конуса
// ------------------------------------------------------------------------------------ //
float le::SpotLight::GetHeight() const
{
	return height;
}

// ------------------------------------------------------------------------------------ //
// Задать цвет света
// ------------------------------------------------------------------------------------ //
void le::SpotLight::SetColor( const Vector4D_t& Color )
{
	color = Color;
}

// ------------------------------------------------------------------------------------ //
// Задать отражаемый цвет
// ------------------------------------------------------------------------------------ //
void le::SpotLight::SetSpecular( const Vector4D_t& Color )
{
	specular = Color;
}

// ------------------------------------------------------------------------------------ //
// Задать интенсивность света
// ------------------------------------------------------------------------------------ //
void le::SpotLight::SetIntensivity( float Intensivity )
{
	intensivity = Intensivity;
}

// ------------------------------------------------------------------------------------ //
// Получить цвет света
// ------------------------------------------------------------------------------------ //
const le::Vector4D_t& le::SpotLight::GetColor() const
{
	return color;
}

// ------------------------------------------------------------------------------------ //
// Получить отражаемый цвет
// ------------------------------------------------------------------------------------ //
const le::Vector4D_t& le::SpotLight::GetSpecular() const
{
	return specular;
}

// ------------------------------------------------------------------------------------ //
// Получить интенсивность
// ------------------------------------------------------------------------------------ //
float le::SpotLight::GetIntensivity() const
{
	return intensivity;
}

// ------------------------------------------------------------------------------------ //
// Конструктор
// ------------------------------------------------------------------------------------ //
le::SpotLight::SpotLight() :
	isNeadUpdateCutoff( false ),
	isNeadUpdateTransformation( false ),
	isNeadUpdataDirection( false ),
	intensivity( 1.f ),
	color( 1.f ),
	specular( 1.f ),
	radius( 0.f ),
	position( 0.f ),
	height( 0.f ),
	cutoff( 0.f ),
	rotation( 1.f, 0.f, 0.f, 0.f ),
	direction( 0.f, -1.f, 0.f )
{}

// ------------------------------------------------------------------------------------ //
// Деструктор
// ------------------------------------------------------------------------------------ //
le::SpotLight::~SpotLight()
{}
