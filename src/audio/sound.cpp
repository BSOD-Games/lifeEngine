//////////////////////////////////////////////////////////////////////////
//
//			*** lifeEngine (Двигатель жизни) ***
//				Copyright (C) 2018-2020
//
// Репозиторий движка:  https://github.com/BSOD-GameEdition/lifeEngine
// Авторы:				Егор Погуляка (zombiHello)
//
//////////////////////////////////////////////////////////////////////////

#include <al.h>

#include "soundbuffer.h"
#include "sound.h"

// ------------------------------------------------------------------------------------ //
// Create
// ------------------------------------------------------------------------------------ //
void le::Sound::Create()
{
	if ( handle != 0 )		return;
	alGenSources( 1, &handle );
}

// ------------------------------------------------------------------------------------ //
// Delete
// ------------------------------------------------------------------------------------ //
void le::Sound::Delete()
{
	if ( handle == 0 )		return;
	alDeleteSources( 1, &handle );
}

// ------------------------------------------------------------------------------------ //
// Play
// ------------------------------------------------------------------------------------ //
void le::Sound::Play()
{
	if ( handle == 0 )		return;
	alSourcePlay( handle );
}

// ------------------------------------------------------------------------------------ //
// Pause
// ------------------------------------------------------------------------------------ //
void le::Sound::Pause()
{
	if ( handle == 0 )		return;
	alSourcePause( handle );
}

// ------------------------------------------------------------------------------------ //
// Stop
// ------------------------------------------------------------------------------------ //
void le::Sound::Stop()
{
	if ( handle == 0 )		return;
	alSourceStop( handle );
}

// ------------------------------------------------------------------------------------ //
// Set buffer
// ------------------------------------------------------------------------------------ //
void le::Sound::SetBuffer( ISoundBuffer* SoundBuffer )
{
	if ( handle == 0 )		return;

	soundBuffer = ( le::SoundBuffer* ) SoundBuffer;
	alSourcei( handle, AL_BUFFER, soundBuffer->GetHandle() );
}

// ------------------------------------------------------------------------------------ //
// Get status
// ------------------------------------------------------------------------------------ //
le::SOUND_STATUS le::Sound::GetStatus() const
{
	if ( handle == 0 )		return SS_STOPED;

	ALint			alStatus = 0;
	alGetSourcei( handle, AL_SOURCE_STATE, &alStatus );
	
	switch ( alStatus )
	{
	case AL_PLAYING:	return SS_PLAYING;
	case AL_PAUSED:		return SS_PAUSED;	

	default:
	case AL_STOPPED:
		return SS_STOPED;
	}
}

// ------------------------------------------------------------------------------------ //
// Get buffer
// ------------------------------------------------------------------------------------ //
le::ISoundBuffer* le::Sound::GetBuffer() const
{
	return soundBuffer;
}

// ------------------------------------------------------------------------------------ //
// Constructor
// ------------------------------------------------------------------------------------ //
le::Sound::Sound() :
	handle( 0 ),
	soundBuffer( nullptr )
{}

// ------------------------------------------------------------------------------------ //
// Destructor
// ------------------------------------------------------------------------------------ //
le::Sound::~Sound()
{
	Delete();
}
