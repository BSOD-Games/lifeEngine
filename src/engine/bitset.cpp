//////////////////////////////////////////////////////////////////////////
//
//			*** lifeEngine (Двигатель жизни) ***
//				Copyright (C) 2018-2019
//
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// Авторы:				Егор Погуляка (zombiHello)
//
//////////////////////////////////////////////////////////////////////////

#include "bitset.h"

// ------------------------------------------------------------------------------------ //
// Конструктор
// ------------------------------------------------------------------------------------ //
le::Bitset::Bitset() :
	bits( nullptr ),
	size( 0 )
{}

// ------------------------------------------------------------------------------------ //
// Деструктор
// ------------------------------------------------------------------------------------ //
le::Bitset::~Bitset()
{
	if ( bits )
	{
		delete bits;
		bits = nullptr;
	}
}

// ------------------------------------------------------------------------------------ //
// Изменить размер
// ------------------------------------------------------------------------------------ //
void le::Bitset::Resize( UInt32_t Count )
{
	size = Count / 32 + 1;

	if ( bits )
	{
		delete bits;
		bits = nullptr;
	}

	bits = new UInt32_t[ size ];
	ClearAll();
}

// ------------------------------------------------------------------------------------ //
//  Задать бит
// ------------------------------------------------------------------------------------ //
void le::Bitset::Set( int Byte )
{
	bits[ Byte >> 5 ] |= ( 1 << ( Byte & 31 ) );
}

// ------------------------------------------------------------------------------------ //
// Проверить бит
// ------------------------------------------------------------------------------------ //
int le::Bitset::On( int Byte )
{
	return bits[ Byte >> 5 ] & ( 1 << ( Byte & 31 ) );
}

// ------------------------------------------------------------------------------------ //
// Сбросить бит в 0
// ------------------------------------------------------------------------------------ //
void le::Bitset::Clear( int Byte )
{
	bits[ Byte >> 5 ] &= ~( 1 << ( Byte & 31 ) );
}

// ------------------------------------------------------------------------------------ //
// Сбросить все биты в 0
// ------------------------------------------------------------------------------------ //
void le::Bitset::ClearAll()
{
	memset( bits, 0, size * sizeof( UInt32_t ) );
}
